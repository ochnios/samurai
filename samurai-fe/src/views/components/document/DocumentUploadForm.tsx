import {
  Box,
  Button,
  FileInput,
  Stack,
  Textarea,
  TextInput,
} from "@mantine/core";
import { useForm } from "@mantine/form";
import {
  validateDescription,
  validateFile,
  validateTitle,
} from "../../../model/service/documentService.ts";
import { DocumentUpload } from "../../../model/api/document/DocumentUpload.ts";

interface DocumentUploadFormProps {
  onSubmit: (document: DocumentUpload) => void;
}

export default function DocumentUploadForm(props: DocumentUploadFormProps) {
  const form = useForm({
    initialValues: {
      file: null as File | null,
      title: "",
      description: "",
      autogenerateDescription: false,
    },
    validate: {
      file: validateFile,
      title: validateTitle,
      description: validateDescription,
    },
  });

  const handleFileChange = (file: File | null) => {
    if (file) {
      const fileTitle = file.name.replace(/\.[^/.]+$/, ""); // Remove file extension
      form.setFieldValue("file", file);
      form.setFieldValue("title", fileTitle);
    } else {
      form.setFieldValue("title", "");
    }
  };

  const handleSubmit = (values: typeof form.values) => {
    const document: DocumentUpload = {
      file: values.file as File,
      title: values.title.trim(),
      autogenerateDescription: values.autogenerateDescription,
      description:
        values.autogenerateDescription || values.description.trim().length == 0
          ? null
          : values.description.trim(),
    };
    props.onSubmit(document);
  };

  return (
    <Box>
      <form onSubmit={form.onSubmit(handleSubmit)}>
        <Stack gap="md">
          <FileInput
            label="Upload Document"
            description="Only PDF documents are supported, up to 50MB"
            placeholder="Choose file"
            accept="*/*"
            value={form.values.file}
            onChange={handleFileChange}
            error={form.errors.file}
            required
          />
          <TextInput
            label="Title"
            placeholder="Document title"
            value={form.values.title}
            onChange={(event) =>
              form.setFieldValue("title", event.currentTarget.value)
            }
            error={form.errors.title}
            required
          />
          <Textarea
            label="Document description"
            placeholder="Enter document description"
            value={form.values.description}
            onChange={(event) =>
              form.setFieldValue("description", event.currentTarget.value)
            }
            disabled={form.values.autogenerateDescription}
            resize="vertical"
            autosize
            minRows={3}
            error={form.errors.description}
          />
          {/* TODO */}
          {/*<Checkbox*/}
          {/*  label="Generate description automatically"*/}
          {/*  description="If checked, description will be generated automatically basing on document content"*/}
          {/*  checked={form.values.autogenerateDescription}*/}
          {/*  onChange={(event) =>*/}
          {/*    form.setFieldValue(*/}
          {/*      "autogenerateDescription",*/}
          {/*      event.currentTarget.checked,*/}
          {/*    )*/}
          {/*  }*/}
          {/*/>*/}
          <Button type="submit">Upload</Button>
        </Stack>
      </form>
    </Box>
  );
}
